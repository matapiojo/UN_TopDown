using System.Collections;
using UnityEngine;
using UnityEngine.Tilemaps;

public class Player : MonoBehaviour
{
    private bool tieneLlave = false;
    private float inputH;
    private float inputV;
    private bool moviendose;
    private Vector3 puntoDestino;
    private Vector3 ultimoInput;
    private Vector3 puntoInteraccion;
    private Collider2D colliderDelante;

    [SerializeField] private float velocidadMovimiento;
    [SerializeField] private float radioInteraccion;
    [SerializeField] private LayerMask esColisionable;

    [Header("Tilemap Layers")]
    public Tilemap[] defaultLayers;
    public Tilemap[] alternateLayers;

    [Header("UI")]
    public GameObject felicitacionesUI; // Interfaz de felicitaciones

    private bool hasSwitchedLayers = false;

    private void Start()
    {
        SetTilemapsVisibility(defaultLayers, true);
        SetTilemapsVisibility(alternateLayers, false);

        // Asegurarse de que la UI esté oculta al inicio
        if (felicitacionesUI != null)
        {
            felicitacionesUI.SetActive(false);
        }
    }

    private void Update()
    {
        if (inputV == 0)
        {
            inputH = Input.GetAxis("Horizontal");
        }
        if (inputH == 0)
        {
            inputV = Input.GetAxis("Vertical");
        }

        if (!moviendose && (inputH != 0 || inputV != 0))
        {
            ultimoInput = new Vector3(inputH, inputV, 0);
            puntoDestino = transform.position + ultimoInput;
            puntoInteraccion = puntoDestino;

            colliderDelante = LanzarCheck();
            if (!colliderDelante)
            {
                StartCoroutine(Mover());
            }
        }
    }

    private IEnumerator Mover()
    {
        moviendose = true;

        while (transform.position != puntoDestino)
        {
            transform.position = Vector3.MoveTowards(transform.position, puntoDestino, velocidadMovimiento * Time.deltaTime);
            yield return null;
        }

        puntoInteraccion = transform.position + ultimoInput;
        moviendose = false;
    }

    private Collider2D LanzarCheck()
    {
        return Physics2D.OverlapCircle(puntoInteraccion, radioInteraccion, esColisionable);
    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawSphere(puntoInteraccion, radioInteraccion);
    }

    private void SetTilemapsVisibility(Tilemap[] tilemaps, bool isVisible)
    {
        foreach (Tilemap tilemap in tilemaps)
        {
            tilemap.gameObject.SetActive(isVisible);
        }
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("LayerTrigger"))
        {
            if (!hasSwitchedLayers)
            {
                SetTilemapsVisibility(defaultLayers, false);
                SetTilemapsVisibility(alternateLayers, true);
                hasSwitchedLayers = true;
            }
            else if (tieneLlave)
            {
                SetTilemapsVisibility(defaultLayers, true);
                SetTilemapsVisibility(alternateLayers, false);
                hasSwitchedLayers = false;
            }
        }

        // ⚡ Si el jugador tiene la llave y entra en la zona de la casa, mostrar UI
        if (other.CompareTag("Casa") && tieneLlave)
        {
            if (felicitacionesUI != null)
            {
                felicitacionesUI.SetActive(true);
            }
        }
    }

    public void PickUpKey()
    {
        tieneLlave = true;
    }
}
